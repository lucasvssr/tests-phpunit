<?php

declare(strict_types=1);

namespace Tests\Calculator;

use Calculator\FloatCalculator;
use PHPUnit\Framework\TestCase;

class FloatCalculatorTest extends TestCase
{
    protected FloatCalculator $floatCalculator;
    protected const DELTA = 1E-15;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->floatCalculator = new FloatCalculator();
    }

    /**
     * @dataProvider additionProvider
     * @param float $firstOperand
     * @param float $secondOperand
     * @param float $expected
     */
    public function testAddition(float $firstOperand, float $secondOperand, float $expected)
    {
        $this->assertEqualsWithDelta($expected, $this->floatCalculator->add($firstOperand, $secondOperand), self::DELTA, "{$this->floatCalculator->add($firstOperand, $secondOperand)} n'est pas égale à {$expected}");
    }

    protected function additionProvider(): array
    {
        return [
            'Result equal 3' => [1.,2.,3.],
            'Result equal -12' => [-14.,2.,-12.],
            'Result equal 2' => [0.,2.,2.],
        ];
    }

    /**
     * @dataProvider subtractProvider
     * @param float $firstOperand
     * @param float $secondOperand
     * @param float $expected
     */
    public function testSubtract(float $firstOperand, float $secondOperand, float $expected)
    {
        $this->assertEqualsWithDelta($expected, $this->floatCalculator->subtract($firstOperand, $secondOperand), self::DELTA, "{$this->floatCalculator->subtract($firstOperand, $secondOperand)} n'est pas égale à {$expected}");
    }

    protected function subtractProvider(): array
    {
        return [
            'Result equal 3' => [5.,2.,3.],
            'Result equal -12' => [-10.,2.,-12.],
            'Result equal -2' => [0.,2.,-2.],
        ];
    }

    /**
     * @dataProvider multiplyProvider
     * @param float $firstOperand
     * @param float $secondOperand
     * @param float $expected
     */
    public function testMultiply(float $firstOperand, float $secondOperand, float $expected)
    {
        $this->assertEqualsWithDelta($expected, $this->floatCalculator->multiply($firstOperand, $secondOperand), self::DELTA, "{$this->floatCalculator->multiply($firstOperand, $secondOperand)} n'est pas égale à {$expected}");
    }

    protected function multiplyProvider(): array
    {
        return [
            'Result equal 10' => [5.,2.,10.],
            'Result equal -20' => [-10.,2.,-20.],
            'Result equal -2' => [0.,2.,0.],
        ];
    }

    /**
     * @dataProvider divideProvider
     * @param float $firstOperand
     * @param float $secondOperand
     * @param float $expected
     */
    public function testDivide(float $firstOperand, float $secondOperand, float $expected)
    {
        $this->assertEqualsWithDelta($expected, $this->floatCalculator->divide($firstOperand, $secondOperand), self::DELTA, "{$this->floatCalculator->divide($firstOperand, $secondOperand)} n'est pas égale à {$expected}");
    }

    protected function divideProvider(): array
    {
        return [
            'Result equal 5' => [10.,2.,5.],
            'Result equal -5' => [-10.,2.,-5.],
            'Result equal 0' => [0.,2.,0.],
        ];
    }

    /**
     * @dataProvider modulusProvider
     * @param float $firstOperand
     * @param float $secondOperand
     * @param float $expected
     */
    public function testModulus(float $firstOperand, float $secondOperand, float $expected)
    {
        $this->assertEqualsWithDelta($expected, $this->floatCalculator->modulus($firstOperand, $secondOperand), self::DELTA, "{$this->floatCalculator->modulus($firstOperand, $secondOperand)} n'est pas égale à {$expected}");
    }

    protected function modulusProvider(): array
    {
        return [
            'Result equal 2' => [8.,3.,2.],
            'Result equal -3' => [-10.,7.,-3.],
            'Result equal 0' => [0.,2.,0.],
            'Result equal 0.2' => [5., 2.4, 0.2]
        ];
    }

    /**
     * @dataProvider sumProvider
     * @param array $operand
     * @param float $expected
     */
    public function testSum(array $operand, float $expected)
    {
        $this->assertEqualsWithDelta($expected, $this->floatCalculator->sum($operand), self::DELTA, "{$this->floatCalculator->sum($operand)} n'est pas égale à {$expected}");
    }

    protected function sumProvider(): array
    {
        return [
            'Result equal 25' => [[8.,3.,4.,6.,4.],25.],
            'Result equal -20' => [[-10.,7.,-3.,-4.,-10.],-20.],
            'Result equal 15' => [[0.,2.,-8.,-4.,5.,7.,9.,4.],15.],
        ];
    }
}
