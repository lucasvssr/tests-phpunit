<?php

declare(strict_types=1);

namespace Tests\Time\DateTimeVersion;

use Time\DateTimeVersion\CurrentTime;
use PHPUnit\Framework\TestCase;
use DateTime;

class CurrentTimeTest extends TestCase
{
    protected CurrentTime $currentTime;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->currentTime = new CurrentTime();
    }

    public function testGetTimeBoundariesBetween0And23()
    {
        $this->assertThat(
            $this->currentTime->getTime(),
            $this->logicalAnd(
                $this->greaterThanOrEqual('0'),
                $this->lessThanOrEqual('23'),
            )
        );
    }

    /**
     * @dataProvider timeOfDayProvider
     * @param array $times
     * @param int $expected
     * @return void
     */
    public function testGetTimeOfDay(array $times, int $expected): void
    {
        foreach ($times as $time) {
            $day = $this->createPartialMock(CurrentTime::class, ['getTime']);

            $day->expects($this->exactly(1))
                ->method('getTime')
                ->willReturn($time);

            $this->assertEquals($expected, $day->getTimeOfDay(), "{$time} is not {$expected}");
        }
    }

    protected function timeOfDayProvider(): array
    {
        return  [
            'Result Night' => [['00','01','02','03','04','05'], 1],
            'Result Morning' => [['06','07','08','09','10','11'], 2],
            'Result Noon' => [['12','13','14','15','16','17'], 3],
            'Result Evening' => [['18','19','20','21','22','23'], 4]
        ];
    }

    /**
     * @dataProvider getTimeProvider
     * @param DateTime $time
     * @param string $expected
     * @return void
     */
    public function testGetTime(DateTime $time, string $expected): void
    {
        $timeStamp = $this->createPartialMock(CurrentTime::class, ['getDateTime']);

        $timeStamp->expects($this->exactly(1))
            ->method('getDateTime')
            ->willReturn($time);

        $this->assertEquals($expected, $timeStamp->getTime(), "{$time->format('H')} is not {$expected}");
    }

    protected function getTimeProvider(): array
    {
        return [
            'Return 03' => [(new DateTime())->setTime(03, 0),'03'],
            'Return 06' => [(new DateTime())->setTime(06, 0),'06'],
            'Return 12' => [(new DateTime())->setTime(12, 0),'12'],
            'Return 23' => [(new DateTime())->setTime(23, 0),'23'],
        ];
    }
}
