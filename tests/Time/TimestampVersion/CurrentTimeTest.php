<?php

declare(strict_types=1);

namespace Tests\Time\TimestampVersion;

use Time\TimestampVersion\CurrentTime;
use PHPUnit\Framework\TestCase;

class CurrentTimeTest extends TestCase
{
    protected CurrentTime $currentTime;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->currentTime = new CurrentTime();
    }

    public function testGetTimeBoundariesBetween0And23()
    {
        $this->assertThat(
            $this->currentTime->getTime(),
            $this->logicalAnd(
                $this->greaterThanOrEqual('0'),
                $this->lessThanOrEqual('23'),
            )
        );
    }

    /**
     * @dataProvider timeOfDayProvider
     * @param array $times
     * @param string $expected
     * @return void
     */
    public function testGetTimeOfDay(array $times, string $expected): void
    {
        foreach ($times as $time) {
            $day = $this->createPartialMock(CurrentTime::class, ['getTime']);

            $day->expects($this->exactly(1))
                ->method('getTime')
                ->willReturn($time);

            $this->assertEquals($expected, $day->getTimeOfDay(), "{$time} is not {$expected}");
        }
    }

    protected function timeOfDayProvider(): array
    {
        return  [
            'Result Night' => [['00','01','02','03','04','05'], 'Night'],
            'Result Morning' => [['06','07','08','09','10','11'],'Morning'],
            'Result Noon' => [['12','13','14','15','16','17'], 'Noon'],
            'Result Evening' => [['18','19','20','21','22','23'], 'Evening']
        ];
    }

    /**
     * @dataProvider getTimeProvider
     * @param string $time
     * @return void
     */
    public function testGetTime(string $time, string $expected)
    {
        $timeStamp = $this->createPartialMock(CurrentTime::class, ['getTimestamp']);

        $timeStamp->expects($this->exactly(1))
            ->method('getTimestamp')
            ->willReturn(strtotime("$time:00:00"));

        $this->assertEquals($expected, $timeStamp->getTime(), "{$time} is not {$expected}");
    }

    protected function getTimeProvider(): array
    {
        return [
            'Return 0' => ['00','00'],
            'Return 3' => ['00','00'],
            'Return 6' => ['06','06'],
            'Return 12' => ['12','12'],
            'Return 23' => ['23','23'],
        ];
    }
}
